///*------------------------------------*\
//    #FUNCTIONS
//\*------------------------------------*/

// fortitude makes use of a few functions that are also available for you to use
// later on in your extension of the framework.

// grouped by sections

// number functions

@function fortitude-quarter($value) {
  @return $value / 4;
}

@function fortitude-halve($value) {
  @return $value / 2;
}

@function fortitude-double($value) {
  @return $value * 2;
}

@function fortitude-quadruple($value) {
  @return $value * 4;
}

@function fortitude-strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@function fortitude-strip-unit-if-zero($value) {
  @return if(fortitude-strip-unit($value) == 0, 0, $value);
}

@function fortitude-px-to-rem($value, $base: 10) {
  @return (fortitude-strip-unit($value) / $base) * 1rem;
}

@function fortitude-rem-to-px($value, $base: 10) {
  @return (fortitude-strip-unit($value) * $base) * 1px;
}

// color functions

@function fortitude-shade($color, $percent) {
  @return mix(black, $color, $percent);
}

@function fortitude-tint($color, $percent) {
  @return mix(white, $color, $percent);
}

// list functions

@function fortitude-contains($list, $value) {
  @return (null != index($list, $value));
}

// map functions

@function fortitude-map-to-query($map) {
  $query: "";
  @for $index from 1 through length($map) {
    $query-part: null;
    $property: nth(nth($map, $index), 1);
    $value: nth(nth($map, $index), 2);

    @if $value == true {
      $query-part: "#{$property}";
    } @else {
      $query-part: "(#{$property}: #{$value})";
    }

    @if $index != length($map) {
      $query-part: str-insert($query-part, " and ", str-length($query-part) + 1);
    }

    $query: str-insert($query, $query-part, str-length($query) + 1);
  }

  @return $query;
}

@function fortitude-query($object) {
  @if type-of($object) == map {
    @return fortitude-map-to-query($object);
  } @else if type-of($object) == number {
    @return fortitude-map-to-query((min-width: $object));
  } @else {
    @return null;
  }
}

// fortitude block functions

@function fortitude-block-spacing-unit-height($block-height, $block-spacing-unit: $fortitude-base-spacing-unit) {
  $value: ceil($block-height / $block-spacing-unit) * $block-spacing-unit;
  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-block-spacing-unit-delta($block-height, $block-spacing-unit: $fortitude-base-spacing-unit) {
  $block-spacing-unit-height: fortitude-block-spacing-unit-height($block-height, $block-spacing-unit);
  $value: $block-spacing-unit-height - $block-height;
  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-block-negitive-padding($block-height, $block-border-width: 0rem, $block-spacing-unit: $fortitude-base-spacing-unit) {
  // this is actually used for margin, but sometimes if you specify your
  // block height greater than a base spacing unit you'll get a negitive number
  // which should still be accounted for, and this is how we do it.

  $value: fortitude-halve($block-height - $block-spacing-unit - fortitude-double($block-border-width));
  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-block-margin($block-height, $block-border-width: 0rem, $block-spacing-unit: $fortitude-base-spacing-unit) {
  $block-spacing-unit-height: fortitude-block-spacing-unit-height($block-height, $block-spacing-unit);
  $value: fortitude-halve($block-spacing-unit-height - $block-height);

  @if $value < 0 {
    $value: fortitude-block-negitive-padding($block-height, $block-border-width, $block-spacing-unit) + fortitude-halve(fortitude-block-spacing-unit-delta($block-height, $block-spacing-unit));
  }

  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-block-padding($block-height, $block-border-width: 0rem, $block-spacing-unit: $fortitude-base-spacing-unit) {
  $value: fortitude-halve($block-height - $block-spacing-unit - fortitude-double($block-border-width));
  @return fortitude-strip-unit-if-zero($value);
}
