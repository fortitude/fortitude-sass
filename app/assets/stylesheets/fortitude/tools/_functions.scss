///*------------------------------------*\
//    #FUNCTIONS
//\*------------------------------------*/

// fortitude makes use of a few functions that are also available for you to use
// later on in your extension of the framework.

// Maths helpers.
//
// Halve and double numbers, returning rounded integers. E.g.:
//
// .foo {
//     padding: halve(3.2px);
// }

//
@function quarter($fortitude-value) {
  @return $fortitude-value / 4;
}


@function halve($fortitude-value) {
  @return $fortitude-value / 2;
}


@function double($fortitude-value) {
  @return $fortitude-value * 2;
}


@function quadruple($fortitude-value) {
  @return $fortitude-value * 4;
}


@function fortitude-strip-unit($fortitude-value) {
  @return $fortitude-value / ($fortitude-value * 0 + 1);
}


@function fortitude-px-to-rem($fortitude-value) {
  @return fortitude-strip-unit($fortitude-value) * 0.1rem;
}


@function fortitude-rem-to-px($fortitude-value) {
  @return fortitude-strip-unit($fortitude-value) * 10px;
}


@function fortitude-block-spacing-unit-height($fortitude-block-height, $fortitude-block-spacing-unit: $fortitude-base-spacing-unit) {
  $fortitude-value: ceil($fortitude-block-height / $fortitude-block-spacing-unit) * $fortitude-block-spacing-unit;
  @return $fortitude-value;
}


@function fortitude-block-spacing-unit-delta($fortitude-block-height, $fortitude-block-spacing-unit: $fortitude-base-spacing-unit) {
  $fortitude-block-spacing-unit-height: fortitude-block-spacing-unit-height($fortitude-block-height, $fortitude-block-spacing-unit);
  $fortitude-value: halve($fortitude-block-spacing-unit-height - $fortitude-block-height);
  // normalize value 0rem to 0.
  @if $fortitude-value == 0 {
    $fortitude-value: 0;
  }

  @return $fortitude-value;
}


@function fortitude-block-negitive-padding($fortitude-block-height, $fortitude-block-border-width: 0, $fortitude-block-spacing-unit: $fortitude-base-spacing-unit) {
  $fortitude-value: halve($fortitude-block-height - $fortitude-block-spacing-unit - double($fortitude-block-border-width));
  // normalize value 0rem to 0.
  @if $fortitude-value > 0 {
    $fortitude-value: 0;
  }

  @return $fortitude-value;
}


@function fortitude-block-margin($fortitude-block-height, $fortitude-block-border-width: 0, $fortitude-block-spacing-unit: $fortitude-base-spacing-unit) {
  $fortitude-block-spacing-unit-height: fortitude-block-spacing-unit-height($fortitude-block-height, $fortitude-block-spacing-unit);
  $fortitude-value: halve($fortitude-block-spacing-unit-height - $fortitude-block-height);
  @if $fortitude-value < 0 {
    $fortitude-value: fortitude-block-negitive-padding($fortitude-block-height, $fortitude-block-border-width, $fortitude-block-spacing-unit) + fortitude-block-spacing-unit-delta($fortitude-block-height, $fortitude-block-spacing-unit);
  }

  // normalize value 0rem to 0.
  @if $fortitude-value == 0 {
    $fortitude-value: 0;
  }

  @return $fortitude-value;
}


@function fortitude-block-padding($fortitude-block-height, $fortitude-block-border-width: 0, $fortitude-block-line-height: $fortitude-base-line-height) {
  $fortitude-value: halve($fortitude-block-height - $fortitude-block-line-height - double($fortitude-block-border-width));
  // normalize value 0rem to 0.
  @if $fortitude-value <= 0 {
    $fortitude-value: 0;
  }

  @return $fortitude-value;
}


@function fortitude-map-to-query($map) {
  $query: "";
  @for $i from 1 through length($map) {
    $part: "(#{nth(nth($map, $i), 1)}:#{nth(nth($map, $i), 2)})";
    @if $i != length($map) {
      $part: str-insert($part, " and ", str-length($part) + 1);
    }

    $query: str-insert($query, $part, str-length($query) + 1);
  }

  @return $query;
}


@function fortitude-query($object) {
  @if type-of($object) == map {
    @return fortitude-map-to-query($object);
  } @else if type-of($object) == number {
    @return fortitude-map-to-query((min-width: $object));
  } @else {
    @return null;
  }
}
