///*------------------------------------*\
//    #FUNCTIONS
//\*------------------------------------*/

// fortitude makes use of a few functions that are also available for you to use
// later on in your extension of the framework.

// grouped by sections

// number functions

@function fortitude-quarter($value) {
  @return $value / 4;
}

@function fortitude-halve($value) {
  @return $value / 2;
}

@function fortitude-double($value) {
  @return $value * 2;
}

@function fortitude-quadruple($value) {
  @return $value * 4;
}

@function fortitude-strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@function fortitude-pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fortitude-font-scale($unit, $ratio: $fortitude-base-font-ratio, $font-size: $fortitude-base-font-size) {
  @return fortitude-pow($ratio, $unit) * $font-size;
}

@function fortitude-strip-unit-if-zero($value) {
  @return if(fortitude-strip-unit($value) == 0, 0, $value);
}

@function fortitude-px-to-rem($value, $base: 10) {
  @return (fortitude-strip-unit($value) / $base) * 1rem;
}

@function fortitude-rem-to-px($value, $base: 10) {
  @return (fortitude-strip-unit($value) * $base) * 1px;
}

// color functions

@function fortitude-shade($color, $percent) {
  @return mix(black, $color, $percent);
}

@function fortitude-tint($color, $percent) {
  @return mix(white, $color, $percent);
}

// list functions

@function fortitude-contains($list, $value) {
  @return (null != index($list, $value));
}

// map functions

@function fortitude-map-to-query($map) {
  $query: "";
  @for $index from 1 through length($map) {
    $query-part: null;
    $property: nth(nth($map, $index), 1);
    $value: nth(nth($map, $index), 2);

    @if $value == true {
      $query-part: "#{$property}";
    } @else {
      $query-part: "(#{$property}: #{$value})";
    }

    @if $index != length($map) {
      $query-part: str-insert($query-part, " and ", str-length($query-part) + 1);
    }

    $query: str-insert($query, $query-part, str-length($query) + 1);
  }

  @return $query;
}

@function fortitude-query($object) {
  @if type-of($object) == map {
    @return fortitude-map-to-query($object);
  } @else if type-of($object) == number {
    @return fortitude-map-to-query((min-width: $object));
  } @else {
    @return null;
  }
}

// fortitude component functions

@function fortitude-component-spacing-unit-height($component-height, $component-spacing-unit: $fortitude-base-spacing-unit) {
  $value: ceil($component-height / $component-spacing-unit) * $component-spacing-unit;
  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-component-spacing-unit-delta($component-height, $component-spacing-unit: $fortitude-base-spacing-unit) {
  $component-spacing-unit-height: fortitude-component-spacing-unit-height($component-height, $component-spacing-unit);
  $value: $component-spacing-unit-height - $component-height;
  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-component-negitive-padding($component-height, $component-border-width: 0rem, $component-spacing-unit: $fortitude-base-spacing-unit) {
  // this is actually used for margin, but sometimes if you specify your
  // component height greater than a base spacing unit you'll get a negitive number
  // which should still be accounted for, and this is how we do it.

  $value: fortitude-halve($component-height - $component-spacing-unit - fortitude-double($component-border-width));
  $value: if($value > 0, 0rem, $value);

  @return $value;
}

@function fortitude-component-margin($component-height, $component-border-width: 0rem, $component-spacing-unit: $fortitude-base-spacing-unit) {
  $component-spacing-unit-height: fortitude-component-spacing-unit-height($component-height, $component-spacing-unit);
  $value: fortitude-halve($component-spacing-unit-height - $component-height);
  $value: $value + fortitude-component-negitive-padding($component-height, $component-border-width, $component-spacing-unit);

  @return fortitude-strip-unit-if-zero($value);
}

@function fortitude-component-padding($component-height, $component-border-width: 0rem, $component-spacing-unit: $fortitude-base-spacing-unit) {
  $component-height-compensation: $component-height - $component-spacing-unit;

  $value: fortitude-halve($component-height-compensation - $component-spacing-unit - fortitude-double($component-border-width));
  $value: if($value < 0, 0rem, $value);

  @return fortitude-strip-unit-if-zero($value);
}
