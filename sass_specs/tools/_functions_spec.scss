@include describe("fortitude-tint") {
  @include it("returns a lighter version of the original color") {
    @include should(expect(fortitude-tint(black, 10%)), to(equal(#191919)));
  }
}

@include describe("fortitude-shade") {
  @include it("returns a darker version of the original color") {
    @include should(expect(fortitude-shade(white, 10%)), to(equal(#e5e5e5)));
  }
}

@include describe("fortitude-quarter") {
  @include it("returns a quarter of the original value") {
    @include should(expect(fortitude-quarter(20)), to(equal(5)));
  }
}

@include describe("fortitude-halve") {
  @include it("returns halve the original value") {
    @include should(expect(fortitude-halve(20)), to(equal(10)));
  }
}

@include describe("fortitude-halve") {
  @include it("returns double the original value") {
    @include should(expect(fortitude-double(10)), to(equal(20)));
  }
}

@include describe("fortitude-strip-unit") {
  @include it("returns a unitless version of the original value") {
    @include should(expect(fortitude-strip-unit(4px)), to(equal(4)));
  }
}

@include describe("fortitude-px-to-rem") {
  @include it("returns a px value of the original rem value") {
    $conversion-unit: 0.1rem; // is optional
    @include should(expect(fortitude-px-to-rem(10px, $conversion-unit)), to(equal(1rem)));
    @include should(expect(fortitude-px-to-rem(10px)), to(equal(1rem)));
  }
}

@include describe("fortitude-rem-to-px") {
  @include it("returns a rem value of the original px value") {
    $conversion-unit: 5px; // is optional
    @include should(expect(fortitude-rem-to-px(2rem, $conversion-unit)), to(equal(10px)));
    @include should(expect(fortitude-rem-to-px(2rem)), to(equal(20px)));
  }
}
